#!/usr/bin/env python
"""
PyBeeGees: quickly change your background.
--------------------
Features:
- Change background image when script is invoked
- Set location and option to download backgrounds of pybeegees site

"""
import subprocess
import os
import random
import sys
import click
import logging

logging.basicConfig(level=logging.INFO)

config_path = path = os.path.join(os.path.expanduser('~'), '.beegees')
download_progress = 0


def get_config():
    """ Grabs configuration file status.
        If exists returns first line

    Returns:
        After trying and succeeding to open the file:
            (
                True: Successful,
                str: path to images directory
            )
        After trying and failing to open the file:
            (
                False: Failure,
                str: Error message
            )
    Raises:
       IOError:
           Something went wrong with handling the file
   """
    try:
        with open(config_path, 'r') as f:
            content = f.readline()

            if len(content) > 0:
                return True, content
    except IOError as e:
        return False, e.message


def write_config(path):
    """ Wipes and creates config file with new path

    Returns:
        After trying and succeeding to open the file:
            (
                True: Successful,
                str: path to images directory
            )
        After trying and failing to open the file:
            (
                False: Failure,
                str: Error message
            )
    Raises:
        IOError:
            Something went wrong with handling the file
    """
    if '~' in path:
        path = os.path.expanduser('~') + path.split[1]

    if '/' == path[-1:]:
        path = path[0:-1]

    if os.path.exists(config_path):
        os.remove(config_path)

    try:
        with open(config_path, 'w+') as f:
            f.write(path)

        return True, None
    except IOError as e:
        return False, e


def get_image_randomly(location=None):
    """ Chooses new image for background randomly

    Attrs:
        location: Path to images folder

    Returns:
        After successfully getting a new image:
            str: Path to image
        After not finding the image location:
            None: No directory found
        After not finding any images:
            None: No images found
    Raises:
        IOError:
            Something went wrong with handling the file
    """
    logging.info("Background images location:\n {}".format(location))
    if location is not None:
        images = os.listdir(location)
        if images:
            image = random.choice(images)
            path = "%s/%s" % (location, image)
            logging.info("Background changed to:\n {}".format(path))
            return path
        else:
            logging.info('The images folder is empty.')
            return None
    else:
        logging.info('No location directory path set.')

    return None


@click.group(invoke_without_command=True)
@click.pass_context
def cli(ctx):
    """ Randomizes background

    Attrs:
        ctx: Context for click
    """
    if ctx.invoked_subcommand is None:
        ctx.invoke(randomize)
    else:
        pass


@cli.command()
def randomize():
    """ Handles actually setting the background image """
    path = get_config()

    if not path[0]:
        logging.error('Image path not set. Use command'
                      'set_image_path to set the path to your images')
        exit()
    filename = get_image_randomly(path[1])

    if sys.platform == "darwin":
        # TODO: Fix osascript error
        script = """/usr/bin/osascript<<END
        tell application "System Events"
            set desktopCount to count of desktops
            repeat with desktopNumber from 1 to desktopCount
                tell desktop desktopNumber
                    set picture to "%s"
                end tell
            end repeat
        end tell
        END"""
        subprocess.call(script % filename, shell=True)
    elif sys.platform == "linux":
        import commands
        command = "gconftool-2 --set " \
                  "/desktop/gnome/background/picture_filename" \
                  "--type string '%s'" % filename

        # status=0 if success
        status, output = commands.getstatusoutput(command)
    elif sys.platform == "cygwin" or sys.platform == "win32":
        import ctypes
        SPI_SETDESKWALLPAPER = 20
        ctypes.windll.user32.SystemParametersInfoA(
                                        SPI_SETDESKWALLPAPER, 0, filename, 0)


@cli.command()
def download_beegees():
    """ Downloads supplied beegees for rotation """
    from HTMLParser import HTMLParser
    import urllib
    import time
    global download_progress

    images = []
    directory = get_config()[1]
    download_progress = 0
    path = 'http://sebastiandieser.com/dev/beegees/backgrounds/'

    class AnchorParser(HTMLParser):
        def handle_starttag(self, tag, attrs):
            if tag == 'a':
                for key, value in attrs:
                    if key == 'href':
                        file_type = value.split('.')
                        ext = os.path.splitext(value)[1]
                        if ext == '.jpg' or ext == '.png':
                            images.append(value)

    parser = AnchorParser()
    data = urllib.urlopen(path).read()
    parser.feed(data)

    # Create directory if it doesn't exist
    if not os.path.exists(directory):
        print 'Directory "%s" does not exist.' % directory
        os.makedirs(directory)
        print 'Created directory: %s' % directory

    # Progress hook
    def report_hook(count, blockSize, totalSize):
        global download_progress
        download_progress += blockSize

        percent = float(download_progress)/totalSize
        percent = round(percent*100, 2)
        result = '%d%%' % percent

        sys.stdout.write(result)
        sys.stdout.flush()
        sys.stdout.write('\b\b\b\b')

    # Download images
    for image in images:
        print 'Downloading: %s%s' % (path, image)
        urllib.urlretrieve('%s%s' % (path, image),
                           '%s/%s' % (directory, image),
                           reporthook=report_hook)
        download_progress = 0
        print 'Done.\n'


@cli.command()
@click.argument('path', default=None, type=click.Path(exists=True))
def set_image_path(path):
    """ Sets config file to specified path """
    write = write_config(path)
    if write[0]:
        logging.info('Image path set to: {}'.format(path))
    else:
        logging.error('Something went wrong: {}', write[1])


if __name__ == '__main__':
    cli()
